const recorder = require('node-record-lpcm16');
const fs = require('fs');
const player = require('play-sound')();
const { SpeechClient } = require('@google-cloud/speech');

// Load environment variables
require('dotenv').config();

// Initialize Google Speech Client
const speechClient = new SpeechClient({
  keyFilename: process.env.GOOGLE_KEY_PATH,
});

// File to save the recorded audio
const audioFile = 'recorded_audio.wav';

// Create a writable stream to save the audio
const fileStream = fs.createWriteStream(audioFile, { encoding: 'binary' });

// Start recording
console.log('Recording started... Speak into the microphone.');
const recording = recorder.record({
  sampleRate: 16000, // Sample rate (16kHz is commonly used)
  channels: 1,       // Mono audio
  audioType: 'wav',  // Audio format
});

// Pipe the audio data to the file
recording.stream().pipe(fileStream);

// Stop recording after 5 seconds
setTimeout(() => {
  recording.stop();
  console.log('Recording stopped. Audio saved to', audioFile);

  // Play back the recorded audio
  player.play(audioFile, (err) => {
    if (err) {
      console.error('Error playing audio:', err);
    } else {
      console.log('Played back the recorded audio.');
    }
  });

  // Transcribe the recorded audio using Google Speech API
  transcribeAudio(audioFile);
}, 5000);

// Function to transcribe audio using Google Speech API
async function transcribeAudio(filePath) {
  const audio = {
    content: fs.readFileSync(filePath).toString('base64'),
  };

  const config = {
    encoding: 'LINEAR16',
    sampleRateHertz: 16000,
    languageCode: 'en-US',
  };

  const request = {
    audio: audio,
    config: config,
  };

  try {
    const [response] = await speechClient.recognize(request);
    const transcription = response.results
      .map((result) => result.alternatives[0].transcript)
      .join('\n');
    console.log('Transcription:', transcription);
  } catch (error) {
    console.error('Error transcribing audio:', error);
  }
}