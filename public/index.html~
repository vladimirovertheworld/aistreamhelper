<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Meeting Assistant</title>
  <style>
    body {
      margin: 0;
      padding: 20px;
      background: #000;
      color: #fff;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
      overflow: hidden;
    }

    /* Transcript Section */
    #transcript-container {
      height: 40vh;
      border-bottom: 2px solid #333;
      margin-bottom: 10px;
      overflow-y: auto;
      background: #1a1a1a;
      border-radius: 8px;
      padding: 15px;
    }

    #transcript-content {
      font-size: 16px;
      line-height: 1.4;
      white-space: pre-wrap;
    }

    /* Teleprompter Section */
    #teleprompter-container {
      flex: 1;
      position: relative;
      overflow: hidden;
      background: #2a2a2a;
      border-radius: 8px;
    }

    .scrolling-text {
      position: absolute;
      width: 100%;
      white-space: pre-wrap;
      font-size: 28px;
      text-align: center;
      transform: translateY(100%);
      animation: scroll 20s linear forwards;
    }

    @keyframes scroll {
      0% { transform: translateY(100%); }
      100% { transform: translateY(-100%); }
    }

    /* Scrollbar Styling */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: #1a1a1a;
    }

    ::-webkit-scrollbar-thumb {
      background: #444;
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <!-- Transcript Section -->
  <div id="transcript-container">
    <div id="transcript-content"></div>
  </div>

  <!-- Teleprompter Section -->
  <div id="teleprompter-container"></div>

  <script>
    const ws = new WebSocket(`wss://localhost:${window.location.port}`);
    const transcriptContent = document.getElementById('transcript-content');
    const teleprompterContainer = document.getElementById('teleprompter-container');

    // Track active animation and element
    let currentAnimation = null;
    let currentScrollingElement = null;

    // Create and manage scrolling text for the teleprompter
    function createScrollingText(content) {
      // Clear previous animation and element
      if (currentAnimation) {
        currentAnimation.cancel();
      }
      if (currentScrollingElement) {
        currentScrollingElement.remove();
      }

      // Create new element
      const div = document.createElement('div');
      div.className = 'scrolling-text';
      div.textContent = content;

      // Calculate animation duration based on text length (minimum 15s)
      const duration = Math.max(15, content.length / 20);
      div.style.animationDuration = `${duration}s`;

      // Store references and append the element
      currentScrollingElement = div;
      teleprompterContainer.appendChild(div);
      currentAnimation = div.getAnimations()[0];

      // Cleanup after animation ends
      div.addEventListener('animationend', () => {
        div.remove();
        currentAnimation = null;
        currentScrollingElement = null;
      });
    }

    // Handle WebSocket messages
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // Clear teleprompter content when receiving clearResponse flag
      if (data.clearResponse) {
        teleprompterContainer.innerHTML = '';
        currentAnimation = null;
        currentScrollingElement = null;
      }

      // Update the transcript display continuously in one element
      if (data.transcript) {
        transcriptContent.textContent = data.transcript;
      }

      // Update teleprompter with OpenAI response
      if (data.aiResponse) {
        createScrollingText(data.aiResponse);
      }
    };

    ws.onopen = () => {
      console.log('WebSocket connection established');
    };

    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };
  </script>
</body>
</html>
